// <auto-generated />
using System;
using EnigmatryFinancial.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EnigmatryFinancial.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240215024222_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.1");

            modelBuilder.Entity("EnigmatryFinancial.Entities.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "address");

                    b.Property<string>("ClientVAT")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "clientVAT");

                    b.Property<int>("CompanyType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "email");

                    b.Property<bool>("IsWhitelisted")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "isWhitelisted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "phone");

                    b.Property<string>("RegistrationNumber")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "registrationNumber");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "tenantId");

                    b.Property<string>("Website")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "website");

                    b.Property<DateTime>("WhenCreated")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "whenCreated");

                    b.Property<DateTime>("WhenUpdated")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "whenUpdated");

                    b.HasKey("Id");

                    b.HasIndex("ClientVAT")
                        .IsUnique();

                    b.HasIndex("TenantId");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("EnigmatryFinancial.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "isActive");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<string>("ProductCode")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "productCode");

                    b.Property<DateTime>("WhenCreated")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "whenCreated");

                    b.Property<DateTime>("WhenUpdated")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "whenUpdated");

                    b.HasKey("Id");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("EnigmatryFinancial.Entities.Tenant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<bool>("IsWhitelisted")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "isWhitelisted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<DateTime>("WhenCreated")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "whenCreated");

                    b.Property<DateTime>("WhenUpdated")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "whenUpdated");

                    b.HasKey("Id");

                    b.ToTable("Tenants");
                });

            modelBuilder.Entity("EnigmatryFinancial.Entities.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("FinancialDocumentId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("WhenCreated")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "whenCreated");

                    b.Property<DateTime>("WhenUpdated")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "whenUpdated");

                    b.HasKey("Id");

                    b.HasIndex("FinancialDocumentId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("EnigmatryFinancial.Models.FinancialDocument", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "accountNumber");

                    b.Property<decimal>("Balance")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "balance");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "clientId");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "currency");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "tenantId");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "type");

                    b.Property<DateTime>("WhenCreated")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "whenCreated");

                    b.Property<DateTime>("WhenUpdated")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "whenUpdated");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("TenantId");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("EnigmatryFinancial.Entities.Client", b =>
                {
                    b.HasOne("EnigmatryFinancial.Entities.Tenant", "Tenant")
                        .WithMany("Clients")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("EnigmatryFinancial.Entities.Transaction", b =>
                {
                    b.HasOne("EnigmatryFinancial.Models.FinancialDocument", "FinancialDocument")
                        .WithMany("Transactions")
                        .HasForeignKey("FinancialDocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FinancialDocument");
                });

            modelBuilder.Entity("EnigmatryFinancial.Models.FinancialDocument", b =>
                {
                    b.HasOne("EnigmatryFinancial.Entities.Client", "Client")
                        .WithMany("FinancialDocuments")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EnigmatryFinancial.Entities.Tenant", "Tenant")
                        .WithMany("FinancialDocuments")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("EnigmatryFinancial.Entities.Client", b =>
                {
                    b.Navigation("FinancialDocuments");
                });

            modelBuilder.Entity("EnigmatryFinancial.Entities.Tenant", b =>
                {
                    b.Navigation("Clients");

                    b.Navigation("FinancialDocuments");
                });

            modelBuilder.Entity("EnigmatryFinancial.Models.FinancialDocument", b =>
                {
                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
