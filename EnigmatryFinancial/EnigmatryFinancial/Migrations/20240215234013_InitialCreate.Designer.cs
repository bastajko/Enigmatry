// <auto-generated />
using System;
using EnigmatryFinancial.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EnigmatryFinancial.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240215234013_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.1");

            modelBuilder.Entity("EnigmatryFinancial.Entities.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "address");

                    b.Property<string>("ClientVAT")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "clientVAT");

                    b.Property<int>("CompanyType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "email");

                    b.Property<bool>("IsWhitelisted")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "isWhitelisted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "phone");

                    b.Property<string>("RegistrationNumber")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "registrationNumber");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "tenantId");

                    b.Property<string>("Website")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "website");

                    b.Property<DateTime>("WhenCreated")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "whenCreated");

                    b.Property<DateTime>("WhenUpdated")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "whenUpdated");

                    b.HasKey("Id");

                    b.HasIndex("ClientVAT")
                        .IsUnique();

                    b.HasIndex("TenantId");

                    b.ToTable("Clients");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b7a11578-2f00-4c48-84d4-20a905d15378"),
                            Address = "",
                            ClientVAT = "123456789",
                            CompanyType = 0,
                            Email = "",
                            IsWhitelisted = true,
                            Name = "ClientA",
                            Phone = "",
                            RegistrationNumber = "ABC123",
                            TenantId = new Guid("988e77da-b0a6-45c2-b085-4c0b667318c6"),
                            Website = "",
                            WhenCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WhenUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("a2b41e8c-a9cb-466b-943a-0a33166ae37f"),
                            Address = "",
                            ClientVAT = "987654321",
                            CompanyType = 0,
                            Email = "",
                            IsWhitelisted = true,
                            Name = "ClientB",
                            Phone = "",
                            RegistrationNumber = "XYZ456",
                            TenantId = new Guid("c61d3258-c9d9-4521-b676-5cc244a2cd1d"),
                            Website = "",
                            WhenCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WhenUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("fc4b173b-3642-43b6-9a07-4fee284ea4f0"),
                            Address = "",
                            ClientVAT = "246813579",
                            CompanyType = 1,
                            Email = "",
                            IsWhitelisted = true,
                            Name = "ClientC",
                            Phone = "",
                            RegistrationNumber = "DEF789",
                            TenantId = new Guid("96238ea2-6462-4eee-898a-9c0f6c79270f"),
                            Website = "",
                            WhenCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WhenUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("f2d6ddc2-aaa8-45a5-842c-0f04e929d5dc"),
                            Address = "",
                            ClientVAT = "654321987",
                            CompanyType = 1,
                            Email = "",
                            IsWhitelisted = true,
                            Name = "ClientD",
                            Phone = "",
                            RegistrationNumber = "GHI012",
                            TenantId = new Guid("988e77da-b0a6-45c2-b085-4c0b667318c6"),
                            Website = "",
                            WhenCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WhenUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("ea705c01-811c-4772-a894-f5ada838ff83"),
                            Address = "",
                            ClientVAT = "135792468",
                            CompanyType = 2,
                            Email = "",
                            IsWhitelisted = true,
                            Name = "ClientE",
                            Phone = "",
                            RegistrationNumber = "JKL345",
                            TenantId = new Guid("c61d3258-c9d9-4521-b676-5cc244a2cd1d"),
                            Website = "",
                            WhenCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WhenUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("884bf9cc-1cb7-450f-b2be-c6cd3bdc7ebd"),
                            Address = "",
                            ClientVAT = "369258147",
                            CompanyType = 2,
                            Email = "",
                            IsWhitelisted = true,
                            Name = "ClientF",
                            Phone = "",
                            RegistrationNumber = "MNO678",
                            TenantId = new Guid("c61d3258-c9d9-4521-b676-5cc244a2cd1d"),
                            Website = "",
                            WhenCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WhenUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("EnigmatryFinancial.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<string>("EntityName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsRetrieved")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<string>("ProductCode")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "productCode");

                    b.Property<string>("PropertyName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("WhenCreated")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "whenCreated");

                    b.Property<DateTime>("WhenUpdated")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "whenUpdated");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("04e42f3a-1a86-4b24-9333-3b78afa906a8"),
                            EntityName = "",
                            IsRetrieved = false,
                            Name = "ProductA",
                            ProductCode = "ProductA",
                            PropertyName = "",
                            WhenCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WhenUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("b2f5b843-fb2f-4c95-9df8-ea7ebd526942"),
                            EntityName = "",
                            IsRetrieved = false,
                            Name = "ProductB",
                            ProductCode = "ProductB",
                            PropertyName = "",
                            WhenCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WhenUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("EnigmatryFinancial.Entities.Tenant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<bool>("IsWhitelisted")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "isWhitelisted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<DateTime>("WhenCreated")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "whenCreated");

                    b.Property<DateTime>("WhenUpdated")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "whenUpdated");

                    b.HasKey("Id");

                    b.ToTable("Tenants");

                    b.HasData(
                        new
                        {
                            Id = new Guid("988e77da-b0a6-45c2-b085-4c0b667318c6"),
                            IsWhitelisted = true,
                            Name = "TenantA",
                            WhenCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WhenUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("c61d3258-c9d9-4521-b676-5cc244a2cd1d"),
                            IsWhitelisted = true,
                            Name = "TenantB",
                            WhenCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WhenUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("96238ea2-6462-4eee-898a-9c0f6c79270f"),
                            IsWhitelisted = false,
                            Name = "TenantC",
                            WhenCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WhenUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("EnigmatryFinancial.Entities.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("FinancialDocumentId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("WhenCreated")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "whenCreated");

                    b.Property<DateTime>("WhenUpdated")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "whenUpdated");

                    b.HasKey("Id");

                    b.HasIndex("FinancialDocumentId");

                    b.ToTable("Transactions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2ebf1c7d-c529-436a-8944-28d826ecad07"),
                            Amount = 652.48m,
                            Category = "Shopping",
                            Date = new DateTime(2024, 2, 5, 0, 40, 9, 849, DateTimeKind.Local).AddTicks(8831),
                            Description = "Grocery shopping",
                            FinancialDocumentId = new Guid("5ebe5661-1129-402d-952d-b4baccc6dddd"),
                            WhenCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WhenUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("e2239064-df59-4bac-b61b-7ba35613c5de"),
                            Amount = 694.34m,
                            Category = "Food & Dining",
                            Date = new DateTime(2024, 2, 4, 0, 40, 9, 849, DateTimeKind.Local).AddTicks(8962),
                            Description = "Dinner at restaurant",
                            FinancialDocumentId = new Guid("234514aa-cdb8-4fad-be96-7cca98fb3337"),
                            WhenCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WhenUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("31c65c4c-9c64-4913-a168-af55ec9bc0f2"),
                            Amount = 478.50m,
                            Category = "Food & Dining",
                            Date = new DateTime(2023, 11, 26, 0, 40, 9, 849, DateTimeKind.Local).AddTicks(8977),
                            Description = "Dinner at restaurant",
                            FinancialDocumentId = new Guid("5ebe5661-1129-402d-952d-b4baccc6dddd"),
                            WhenCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WhenUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("816c7088-3402-43c3-8ebb-32ee81ebf164"),
                            Amount = 761.16m,
                            Category = "Utilities",
                            Date = new DateTime(2024, 2, 1, 0, 40, 9, 849, DateTimeKind.Local).AddTicks(8989),
                            Description = "Grocery shopping",
                            FinancialDocumentId = new Guid("234514aa-cdb8-4fad-be96-7cca98fb3337"),
                            WhenCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WhenUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("3eaea83b-3258-417b-8791-068b95f63b5a"),
                            Amount = 767.42m,
                            Category = "Food & Dining",
                            Date = new DateTime(2023, 2, 27, 0, 40, 9, 849, DateTimeKind.Local).AddTicks(9008),
                            Description = "Gas station purchase",
                            FinancialDocumentId = new Guid("234514aa-cdb8-4fad-be96-7cca98fb3337"),
                            WhenCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WhenUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("df71c41a-5cd4-4020-894e-5de5f3b44e35"),
                            Amount = 964.82m,
                            Category = "Entertainment",
                            Date = new DateTime(2024, 1, 15, 0, 40, 9, 849, DateTimeKind.Local).AddTicks(9022),
                            Description = "Online shopping",
                            FinancialDocumentId = new Guid("234514aa-cdb8-4fad-be96-7cca98fb3337"),
                            WhenCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WhenUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("4a52e48d-e652-4bbc-bbf8-339e4efbb41b"),
                            Amount = 582.48m,
                            Category = "Utilities",
                            Date = new DateTime(2023, 9, 24, 0, 40, 9, 849, DateTimeKind.Local).AddTicks(9034),
                            Description = "Dinner at restaurant",
                            FinancialDocumentId = new Guid("5ebe5661-1129-402d-952d-b4baccc6dddd"),
                            WhenCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WhenUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("d7ce1023-2c29-45bb-a41c-e6262d085c08"),
                            Amount = 395.76m,
                            Category = "Food & Dining",
                            Date = new DateTime(2023, 3, 28, 0, 40, 9, 849, DateTimeKind.Local).AddTicks(9044),
                            Description = "Online shopping",
                            FinancialDocumentId = new Guid("234514aa-cdb8-4fad-be96-7cca98fb3337"),
                            WhenCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WhenUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("7363cd12-5d2c-4ecb-a419-1c11d6cfd019"),
                            Amount = 61.61m,
                            Category = "Utilities",
                            Date = new DateTime(2023, 3, 21, 0, 40, 9, 849, DateTimeKind.Local).AddTicks(9077),
                            Description = "Grocery shopping",
                            FinancialDocumentId = new Guid("234514aa-cdb8-4fad-be96-7cca98fb3337"),
                            WhenCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WhenUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("83c4d003-54d3-4c06-a336-36d20d11f9a1"),
                            Amount = 600.02m,
                            Category = "Utilities",
                            Date = new DateTime(2023, 4, 9, 0, 40, 9, 849, DateTimeKind.Local).AddTicks(9111),
                            Description = "Gas station purchase",
                            FinancialDocumentId = new Guid("5ebe5661-1129-402d-952d-b4baccc6dddd"),
                            WhenCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WhenUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("9bd04776-e674-4d8f-ba55-aa31499ed8f3"),
                            Amount = 958.69m,
                            Category = "Shopping",
                            Date = new DateTime(2023, 10, 12, 0, 40, 9, 849, DateTimeKind.Local).AddTicks(9123),
                            Description = "Gas station purchase",
                            FinancialDocumentId = new Guid("5ebe5661-1129-402d-952d-b4baccc6dddd"),
                            WhenCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WhenUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("ca1d8267-dffb-4bee-9c15-ad501524123d"),
                            Amount = 793.12m,
                            Category = "Entertainment",
                            Date = new DateTime(2023, 7, 30, 0, 40, 9, 849, DateTimeKind.Local).AddTicks(9134),
                            Description = "Dinner at restaurant",
                            FinancialDocumentId = new Guid("234514aa-cdb8-4fad-be96-7cca98fb3337"),
                            WhenCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WhenUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("48b16e98-e11b-44ce-b699-6bb095928cd0"),
                            Amount = 719.74m,
                            Category = "Food & Dining",
                            Date = new DateTime(2023, 4, 1, 0, 40, 9, 849, DateTimeKind.Local).AddTicks(9152),
                            Description = "Grocery shopping",
                            FinancialDocumentId = new Guid("5ebe5661-1129-402d-952d-b4baccc6dddd"),
                            WhenCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WhenUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("72dcd04b-bffd-4757-a44d-ff26a9bdf6a0"),
                            Amount = 237.76m,
                            Category = "Food & Dining",
                            Date = new DateTime(2024, 2, 12, 0, 40, 9, 849, DateTimeKind.Local).AddTicks(9164),
                            Description = "Dinner at restaurant",
                            FinancialDocumentId = new Guid("5ebe5661-1129-402d-952d-b4baccc6dddd"),
                            WhenCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WhenUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("7c4eeddc-e877-4162-92d2-3e749a40e408"),
                            Amount = 136.88m,
                            Category = "Food & Dining",
                            Date = new DateTime(2023, 4, 8, 0, 40, 9, 849, DateTimeKind.Local).AddTicks(9175),
                            Description = "Online shopping",
                            FinancialDocumentId = new Guid("5ebe5661-1129-402d-952d-b4baccc6dddd"),
                            WhenCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WhenUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("f454e27e-12c1-4c14-a82a-facea28666e9"),
                            Amount = 900.86m,
                            Category = "Entertainment",
                            Date = new DateTime(2023, 12, 26, 0, 40, 9, 849, DateTimeKind.Local).AddTicks(9186),
                            Description = "Grocery shopping",
                            FinancialDocumentId = new Guid("5ebe5661-1129-402d-952d-b4baccc6dddd"),
                            WhenCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WhenUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("7c383895-24ff-4928-a1b5-408597d47b62"),
                            Amount = 231.37m,
                            Category = "Shopping",
                            Date = new DateTime(2023, 4, 12, 0, 40, 9, 849, DateTimeKind.Local).AddTicks(9197),
                            Description = "Online shopping",
                            FinancialDocumentId = new Guid("5ebe5661-1129-402d-952d-b4baccc6dddd"),
                            WhenCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WhenUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("b2fc4935-5f43-40a2-8d74-26bab86d14c1"),
                            Amount = 244.20m,
                            Category = "Shopping",
                            Date = new DateTime(2023, 3, 25, 0, 40, 9, 849, DateTimeKind.Local).AddTicks(9213),
                            Description = "Gas station purchase",
                            FinancialDocumentId = new Guid("234514aa-cdb8-4fad-be96-7cca98fb3337"),
                            WhenCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WhenUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("1dea3d13-0968-4efe-803d-4704928494af"),
                            Amount = 6.08m,
                            Category = "Food & Dining",
                            Date = new DateTime(2023, 6, 20, 0, 40, 9, 849, DateTimeKind.Local).AddTicks(9224),
                            Description = "Gas station purchase",
                            FinancialDocumentId = new Guid("234514aa-cdb8-4fad-be96-7cca98fb3337"),
                            WhenCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WhenUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("9fb77465-8f0e-4c80-8b7d-cc39cc916afc"),
                            Amount = 160.98m,
                            Category = "Utilities",
                            Date = new DateTime(2023, 6, 15, 0, 40, 9, 849, DateTimeKind.Local).AddTicks(9235),
                            Description = "Grocery shopping",
                            FinancialDocumentId = new Guid("234514aa-cdb8-4fad-be96-7cca98fb3337"),
                            WhenCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WhenUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("EnigmatryFinancial.Models.FinancialDocument", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "accountNumber");

                    b.Property<decimal>("Balance")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "balance");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "clientId");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "currency");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "tenantId");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "type");

                    b.Property<DateTime>("WhenCreated")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "whenCreated");

                    b.Property<DateTime>("WhenUpdated")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "whenUpdated");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("TenantId");

                    b.ToTable("Documents");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5ebe5661-1129-402d-952d-b4baccc6dddd"),
                            AccountNumber = "95867648",
                            Balance = 1000.00m,
                            ClientId = new Guid("f2d6ddc2-aaa8-45a5-842c-0f04e929d5dc"),
                            Currency = "USD",
                            TenantId = new Guid("988e77da-b0a6-45c2-b085-4c0b667318c6"),
                            Type = "Invoice",
                            WhenCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WhenUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("234514aa-cdb8-4fad-be96-7cca98fb3337"),
                            AccountNumber = "93577094",
                            Balance = 2500.00m,
                            ClientId = new Guid("ea705c01-811c-4772-a894-f5ada838ff83"),
                            Currency = "EUR",
                            TenantId = new Guid("c61d3258-c9d9-4521-b676-5cc244a2cd1d"),
                            Type = "Receipt",
                            WhenCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WhenUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("EnigmatryFinancial.Entities.Client", b =>
                {
                    b.HasOne("EnigmatryFinancial.Entities.Tenant", "Tenant")
                        .WithMany("Clients")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("EnigmatryFinancial.Entities.Transaction", b =>
                {
                    b.HasOne("EnigmatryFinancial.Models.FinancialDocument", "FinancialDocument")
                        .WithMany("Transactions")
                        .HasForeignKey("FinancialDocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FinancialDocument");
                });

            modelBuilder.Entity("EnigmatryFinancial.Models.FinancialDocument", b =>
                {
                    b.HasOne("EnigmatryFinancial.Entities.Client", "Client")
                        .WithMany("FinancialDocuments")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EnigmatryFinancial.Entities.Tenant", "Tenant")
                        .WithMany("FinancialDocuments")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("EnigmatryFinancial.Entities.Client", b =>
                {
                    b.Navigation("FinancialDocuments");
                });

            modelBuilder.Entity("EnigmatryFinancial.Entities.Tenant", b =>
                {
                    b.Navigation("Clients");

                    b.Navigation("FinancialDocuments");
                });

            modelBuilder.Entity("EnigmatryFinancial.Models.FinancialDocument", b =>
                {
                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
